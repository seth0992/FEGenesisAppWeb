@page "/reportes/clientes"
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Reporte de Clientes - GenesisFE</PageTitle>

<div class="container-fluid">
    <RadzenRow class="mb-4">
        <RadzenColumn Size="12">
            <RadzenText TextStyle="TextStyle.H3">Reporte de Análisis de Clientes</RadzenText>
        </RadzenColumn>
    </RadzenRow>

    <!-- Filtros -->
    <RadzenRow class="mb-4">
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenDatePicker @bind-Value=@startDate
                                      Placeholder="Fecha Inicio"
                                      DateFormat="dd/MM/yyyy"
                                      Class="w-100"
                                      Style="max-width: 200px;" />

                    <RadzenDatePicker @bind-Value=@endDate
                                      Placeholder="Fecha Fin"
                                      DateFormat="dd/MM/yyyy"
                                      Class="w-100"
                                      Style="max-width: 200px;" />

                    <RadzenDropDown Data=@clientTypes
                                    @bind-Value=@selectedClientType
                                    TextProperty="Description"
                                    ValueProperty="Id"
                                    AllowClear="true"
                                    Placeholder="Tipo de Cliente"
                                    Class="w-100"
                                    Style="max-width: 200px;" />

                    <RadzenButton Text="Generar Reporte"
                                  Icon="search"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Click=@GenerateReport />

                    <RadzenButton Text="Exportar"
                                  Icon="file_download"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Click=@ExportReport />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Tarjetas de Resumen -->
    <RadzenRow class="mb-4">
        <RadzenColumn Size="12" SizeMD="3">
            <RadzenCard>
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.H6">Total de Clientes</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4">156</RadzenText>
                    <div class="d-flex align-items-center">
                        <RadzenIcon Icon="trending_up" Style="color: var(--rz-success);" />
                        <RadzenText TextStyle="TextStyle.Body2">+12 nuevos en este periodo</RadzenText>
                    </div>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3">
            <RadzenCard>
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.H6">Clientes Activos</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4">85%</RadzenText>
                    <div class="d-flex align-items-center">
                        <RadzenIcon Icon="trending_up" Style="color: var(--rz-success);" />
                        <RadzenText TextStyle="TextStyle.Body2">+5% vs periodo anterior</RadzenText>
                    </div>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3">
            <RadzenCard>
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.H6">Compra Promedio</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4">₡125,000</RadzenText>
                    <div class="d-flex align-items-center">
                        <RadzenIcon Icon="trending_up" Style="color: var(--rz-success);" />
                        <RadzenText TextStyle="TextStyle.Body2">+8% vs periodo anterior</RadzenText>
                    </div>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3">
            <RadzenCard>
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.H6">Clientes Recurrentes</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4">65%</RadzenText>
                    <div class="d-flex align-items-center">
                        <RadzenIcon Icon="trending_down" Style="color: var(--rz-danger);" />
                        <RadzenText TextStyle="TextStyle.Body2">-2% vs periodo anterior</RadzenText>
                    </div>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Gráficos -->
    <RadzenRow class="mb-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.H6" Class="mb-4">Distribución de Clientes por Tipo</RadzenText>
                <RadzenChart>
                    <RadzenPieSeries Data="@clientDistribution"
                                     CategoryProperty="Type"
                                     ValueProperty="Count"
                                     Title="Tipos de Cliente" />
                    <RadzenLegend Position="LegendPosition.Bottom" />
                </RadzenChart>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.H6" Class="mb-4">Top 10 Clientes por Ingresos</RadzenText>
                <RadzenChart>
                    <RadzenBarSeries Data="@topClients"
                                     CategoryProperty="Name"
                                     ValueProperty="Revenue"
                                     Title="Ingresos" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Ingresos (₡)" />
                    </RadzenValueAxis>
                    <RadzenCategoryAxis>
                        <RadzenAxisTitle Text="Cliente" />
                    </RadzenCategoryAxis>
                </RadzenChart>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Información Detallada de Clientes -->
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.H6" Class="mb-4">Detalle de Clientes</RadzenText>
                <RadzenDataGrid Data="@clientDetails"
                                TItem="ClientDetail"
                                AllowPaging="true"
                                AllowSorting="true"
                                PageSize="10">
                    <Columns>
                        <RadzenDataGridColumn TItem="ClientDetail" Property="Name" Title="Nombre" />
                        <RadzenDataGridColumn TItem="ClientDetail" Property="Type" Title="Tipo" />
                        <RadzenDataGridColumn TItem="ClientDetail" Property="Identification" Title="Identificación" />
                        <RadzenDataGridColumn TItem="ClientDetail" Property="LastPurchase" Title="Última Compra">
                            <Template Context="data">
                                @data.LastPurchase.ToShortDateString()
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ClientDetail" Property="PurchaseCount" Title="Compras" />
                        <RadzenDataGridColumn TItem="ClientDetail" Property="TotalRevenue" Title="Ingresos Totales">
                            <Template Context="data">
                                @data.TotalRevenue.ToString("C2")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ClientDetail" Property="AverageTicket" Title="Ticket Promedio">
                            <Template Context="data">
                                @data.AverageTicket.ToString("C2")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ClientDetail" Property="Status" Title="Estado">
                            <Template Context="data">
                                <RadzenBadge BadgeStyle="@GetClientStatusBadgeStyle(data.Status)"
                                             Text="@GetStatusTranslation(data.Status)" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</div>

@code {
    private DateTime? startDate = DateTime.Now.AddDays(-30);
    private DateTime? endDate = DateTime.Now;
    private string? selectedClientType;
    private List<ClientTypeModel> clientTypes = new();
    private List<ClientDistribution> clientDistribution = new();
    private List<TopClient> topClients = new();
    private List<ClientDetail> clientDetails = new();

    protected override void OnInitialized()
    {
        LoadMockData();
    }

    private BadgeStyle GetClientStatusBadgeStyle(string status)
    {
        return status switch
        {
            "Active" => BadgeStyle.Success,
            "Inactive" => BadgeStyle.Danger,
            _ => BadgeStyle.Light
        };
    }

    private string GetStatusTranslation(string status)
    {
        return status switch
        {
            "Active" => "Activo",
            "Inactive" => "Inactivo",
            _ => status
        };
    }
    private void LoadMockData()
    {
        // Mock client types
        clientTypes = new List<ClientTypeModel>
    {
        new() { Id = "01", Description = "Individual" },
        new() { Id = "02", Description = "Corporation" },
        new() { Id = "03", Description = "Government" }
    };

        // Mock client distribution data
        clientDistribution = new List<ClientDistribution>
    {
        new() { Type = "Individual", Count = 85 },
        new() { Type = "Corporation", Count = 45 },
        new() { Type = "Government", Count = 26 }
    };

        // Mock top clients data
        topClients = Enumerable.Range(1, 10).Select(i => new TopClient
            {
                Name = $"Client {i}",
                Revenue = Random.Shared.Next(500000, 2000000)
            }).OrderByDescending(c => c.Revenue).ToList();

        // Mock client details
        clientDetails = Enumerable.Range(1, 50).Select(i => new ClientDetail
            {
                Name = $"Client {i}",
                Type = clientTypes[Random.Shared.Next(0, clientTypes.Count)].Description,
                Identification = Random.Shared.Next(0, 2) == 0
                        ? $"3-101-{Random.Shared.Next(100000, 999999)}"
                        : $"1-{Random.Shared.Next(1000, 9999)}-{Random.Shared.Next(1000, 9999)}",
                LastPurchase = DateTime.Now.AddDays(-Random.Shared.Next(0, 60)),
                PurchaseCount = Random.Shared.Next(1, 50),
                TotalRevenue = Random.Shared.Next(100000, 2000000),
                Status = Random.Shared.Next(0, 100) < 80 ? "Active" : "Inactive"
            }).OrderByDescending(c => c.TotalRevenue).ToList();

        // Calculate average ticket
        clientDetails.ForEach(c => c.AverageTicket = c.TotalRevenue / c.PurchaseCount);
    }

    private async Task GenerateReport()
    {
        ToastService.ShowInfo("Generando reporte de clientes...");
        await Task.Delay(1000);
        ToastService.ShowSuccess("Reporte de clientes generado exitosamente");
    }

    private async Task ExportReport()
    {
        ToastService.ShowInfo("Exportando reporte de clientes...");
        await Task.Delay(1000);
        ToastService.ShowSuccess("Reporte de clientes exportado exitosamente");
    }
    private class ClientTypeModel
    {
        public string Id { get; set; }
        public string Description { get; set; }
    }

    private class ClientDistribution
    {
        public string Type { get; set; }
        public int Count { get; set; }
    }

    private class TopClient
    {
        public string Name { get; set; }
        public decimal Revenue { get; set; }
    }

    private class ClientDetail
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public string Identification { get; set; }
        public DateTime LastPurchase { get; set; }
        public int PurchaseCount { get; set; }
        public decimal TotalRevenue { get; set; }
        public decimal AverageTicket { get; set; }
        public string Status { get; set; }
    }
}