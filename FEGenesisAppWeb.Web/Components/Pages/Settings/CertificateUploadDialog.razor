@inject DialogService DialogService
@inject IToastService ToastService

<RadzenTemplateForm TItem="CertificateUploadModel" Data=@model Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <RadzenStack>
            <RadzenLabel Text="Nombre del Certificado" />
            <RadzenTextBox @bind-Value=@model.Name Class="w-100" />
            <RadzenRequiredValidator Component="Name" Text="El nombre es requerido" />
        </RadzenStack>

        <RadzenStack>
            <RadzenLabel Text="Archivo de Certificado (.p12)" />
            <RadzenUpload Accept=".p12" Multiple="false" Auto="false" Progress=@OnProgress
                          Change=@OnFileSelected />
            @if (string.IsNullOrEmpty(model.FileName))
            {
                <RadzenRequiredValidator Text="El archivo del certificado es requerido" />
            }
            else
            {
                <RadzenText TextStyle="TextStyle.Caption">Archivo seleccionado: @model.FileName</RadzenText>
            }
        </RadzenStack>

        <RadzenStack>
            <RadzenLabel Text="Contraseña del Certificado" />
            <RadzenPassword @bind-Value=@model.Password Class="w-100" />
            <RadzenRequiredValidator Component="Password" Text="La contraseña es requerida" />
        </RadzenStack>

        <RadzenStack>
            <RadzenCheckBox @bind-Value=@model.IsDefault Name="IsDefault" />
            <RadzenLabel Text="Establecer como certificado predeterminado" Component="IsDefault" />
        </RadzenStack>

        <RadzenCard Style="background-color: var(--rz-info-lighter);" Class="p-3">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem">
                <RadzenIcon Icon="info" Style="color: var(--rz-info-dark); font-size: 24px;" />
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.Body1">Información del Certificado</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Al cargar su certificado digital, este sistema lo almacenará de forma segura
                        para ser utilizado únicamente durante el proceso de firma de documentos electrónicos.
                        La contraseña del certificado se almacena cifrada y solo se utiliza durante el proceso
                        de firma.
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Click=@(() => DialogService.Close(false)) />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                          Text="Subir Certificado" IsBusy=@isSaving BusyText="Subiendo..." />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    private CertificateUploadModel model = new();
    private bool isSaving;

    private void OnProgress(UploadProgressArgs args)
    {
        // Manejar progreso de carga si es necesario
        Console.WriteLine($"Archivo: {args.Progress}% cargado.");
    }

    private async Task OnFileSelected(UploadChangeEventArgs args)
    {
        try
        {
            if (args.Files.Any())
            {
                var file = args.Files.First();
                model.FileName = file.Name;

                // Aquí se puede guardar temporalmente el archivo si es necesario
                using var ms = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(ms);
                model.FileContent = ms.ToArray();

                // Aquí se podría validar si el archivo es realmente un certificado P12 válido
                if (!IsCertificateValid(model.FileContent))
                {
                    ToastService.ShowWarning("El archivo seleccionado no parece ser un certificado P12 válido");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al procesar el archivo: {ex.Message}");
        }
    }

    private bool IsCertificateValid(byte[] fileContent)
    {
        // En un entorno real, aquí se implementaría la validación del certificado
        // Por ejemplo, intentar cargarlo con la librería de certificados de .NET

        // Para el propósito de este ejemplo, simplemente verificamos que tenga contenido
        return fileContent != null && fileContent.Length > 0;
    }

    private async Task OnSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(model.FileName) || model.FileContent == null)
            {
                ToastService.ShowError("Por favor seleccione un archivo de certificado");
                return;
            }

            isSaving = true;

            // En un entorno real, aquí se haría la llamada a la API para cargar el certificado
            // Vamos a simular una carga exitosa
            await Task.Delay(1500); // Simular tiempo de procesamiento

            // Validar que la contraseña del certificado sea correcta
            // En un entorno real, esto se haría en el servidor
            if (string.IsNullOrEmpty(model.Password) || model.Password.Length < 4)
            {
                ToastService.ShowError("La contraseña del certificado parece ser inválida");
                isSaving = false;
                return;
            }

            // Aquí se procesaría el certificado para extraer información como
            // el nombre del emisor, fecha de expiración, etc.
            // model.CertificateInfo = ObtenerInfoCertificado(model.FileContent, model.Password);

            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar el certificado: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private class CertificateUploadModel
    {
        public string Name { get; set; }
        public string Password { get; set; }
        public string FileName { get; set; }
        public byte[] FileContent { get; set; }
        public bool IsDefault { get; set; }
    }
}